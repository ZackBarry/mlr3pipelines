% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpMutate.R
\name{mlr_pipeops_mutatetarget}
\alias{mlr_pipeops_mutatetarget}
\alias{PipeOpMutateTarget}
\title{PipeOpMutateTarget}
\format{Abstract \code{\link{R6Class}} inheriting from \code{\link{PipeOpMutateTarget}}.}
\description{
\itemize{
\item During training: Computes a new feature from the task's target.
The new feature must be a function of the old target and ensure that factor levels etc.
are consistent across train and test set.
\item During prediction: Sets all target values to \code{NA} (if existing) and computes the new feature
according to the transformation specified in param_vals$mutation.
}

If name clashes between old features/targets and to-be-added features occur,
the older ones are overwritten.
}
\section{Construction}{
\preformatted{PipeOpMutateTarget$new(id = "mutate", param_vals = list())
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object, default \code{"mutate"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \code{\link{PipeOpTaskPreproc}}.

The output is the input \code{\link[mlr3:Task]{Task}} with added and/or mutated features according to the \code{mutation} parameter.
}

\section{State}{

The \verb{$state} is a named \code{list} with the \verb{$state} elements inherited from \code{\link{PipeOpTaskPreproc}}.
}

\section{Parameters}{

The parameters are the parameters inherited from \code{\link{PipeOpTaskPreproc}}, as well as:
\itemize{
\item \code{mutation} :: named \code{list} of \code{formula}\cr
Expressions for new features to create (or present features to change), in the form of \code{formula}.
Each element of the list is a \code{formula} with the name of the element naming the feature to create or
change, and the formula expression determining the result. This expression may reference
other features, as well as variables visible at the creation of the \code{formula} (see examples).
Initialized to \code{list()}.
\item \code{delete_originals} :: \code{logical(1)} \cr
Whether to delete original features. Even when this is \code{FALSE},
present features may still be overwritten. Initialized to \code{FALSE}.
}
}

\section{Internals}{

A \code{formula} created using the \code{~} operator always contains a reference to the \code{environment} in which
the \code{formula} is created. This makes it possible to use variables in the \code{~}-expressions that both
reference either column names or variable names.
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOpTaskPreprocSimple}}/\code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}

\examples{
library("mlr3")

pom = po("mutate_target")
pom$param_set$values$mutation = list(
  y_tmp = ~ factor(Species == "virginica", levels = c(TRUE, FALSE))
)

pom$train(list(tsk("iris")))[[1]]$data()
}
\seealso{
Other PipeOps: 
\code{\link{PipeOpEnsemble}},
\code{\link{PipeOpImpute}},
\code{\link{PipeOpTaskPreproc}},
\code{\link{PipeOp}},
\code{\link{mlr_pipeops_boxcox}},
\code{\link{mlr_pipeops_branch}},
\code{\link{mlr_pipeops_chunk}},
\code{\link{mlr_pipeops_classbalancing}},
\code{\link{mlr_pipeops_classifavg}},
\code{\link{mlr_pipeops_classweights}},
\code{\link{mlr_pipeops_colapply}},
\code{\link{mlr_pipeops_collapsefactors}},
\code{\link{mlr_pipeops_copy}},
\code{\link{mlr_pipeops_encodeimpact}},
\code{\link{mlr_pipeops_encodelmer}},
\code{\link{mlr_pipeops_encode}},
\code{\link{mlr_pipeops_featureunion}},
\code{\link{mlr_pipeops_filter}},
\code{\link{mlr_pipeops_fixfactors}},
\code{\link{mlr_pipeops_histbin}},
\code{\link{mlr_pipeops_ica}},
\code{\link{mlr_pipeops_imputehist}},
\code{\link{mlr_pipeops_imputemean}},
\code{\link{mlr_pipeops_imputemedian}},
\code{\link{mlr_pipeops_imputenewlvl}},
\code{\link{mlr_pipeops_imputesample}},
\code{\link{mlr_pipeops_kernelpca}},
\code{\link{mlr_pipeops_learner}},
\code{\link{mlr_pipeops_missind}},
\code{\link{mlr_pipeops_modelmatrix}},
\code{\link{mlr_pipeops_mutate}},
\code{\link{mlr_pipeops_newtarget}},
\code{\link{mlr_pipeops_nop}},
\code{\link{mlr_pipeops_pca}},
\code{\link{mlr_pipeops_quantilebin}},
\code{\link{mlr_pipeops_regravg}},
\code{\link{mlr_pipeops_removeconstants}},
\code{\link{mlr_pipeops_scalemaxabs}},
\code{\link{mlr_pipeops_scalerange}},
\code{\link{mlr_pipeops_scale}},
\code{\link{mlr_pipeops_select}},
\code{\link{mlr_pipeops_smote}},
\code{\link{mlr_pipeops_spatialsign}},
\code{\link{mlr_pipeops_subsample}},
\code{\link{mlr_pipeops_unbranch}},
\code{\link{mlr_pipeops_yeojohnson}},
\code{\link{mlr_pipeops}}
}
\concept{PipeOps}
